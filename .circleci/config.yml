# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.0.2

  # Automatically find bugs and errors in your shell scripts with ShellCheck on every commit.
  # Add this static analysis tool to any CI/CD workflow and ShellCheck your scripts across your repository.
  shellcheck: circleci/shellcheck@2.2.4

  # Install a variety of browsers and tools for browser testing. Includes Chrome, FireFox, ChromeDriver and GeckoDriver.
  # Used for testing Chrome extension installation
  browser-tools: circleci/browser-tools@1.2.3

defaults: &defaults
  # Define a Node docker executor - https://circleci.com/developer/images/image/cimg/node
  docker:
    - image: cimg/node:17.1-browsers
  resource_class: large
  parallelism: 4

jobs:
  build:
    <<: *defaults

    steps:
      # Install Chrome browser
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
            node --version
          name: Check install

      - checkout

      # Install the dependencies from a package.json and cache them for faster future runs
      - node/install-packages:
          pkg-manager: npm
          include-branch-in-cache-key: false

# TODO Re-enable after fixing test
#      # Run tests
#      - run:
#          name: "Build"
#          command: npm run test

      # Run build command
      - run:
          name: "Build"
          command: npm run build

      # Test if the extension can be installed
      - run:
          name: "Test Chrome extension installation"
          command: ./scripts/extension_install_test.sh

      # Zip the build folder to create a Chrome extension package
      - run:
          name: "Zip package"
          command: zip -r build.zip dist/YA2TM

      # Store the build result as an artefact
      - store_artifacts:
          path: build.zip

      # Persist the build result for further steps
      - persist_to_workspace:
          root: .
          paths:
            - build.zip

  publish:
    docker:
      - image: cibuilds/chrome-extension:latest

    steps:
      # Checkout the code as the first step.
      - checkout

      # Attach the build result build.zip
      - attach_workspace:
          at: .

      # Publish the zip file to the Chrome Web Store Developer Dashboard
      - run:
          name: "Publish to the Google Chrome Store"
          command: ./scripts/publish_on_web_store.sh build.zip

workflows:
  version: 2
  main:
    jobs:
      - shellcheck/check
      - build
      - publish:
          requires:
            - shellcheck/check
            - build
