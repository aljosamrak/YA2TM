# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@4.7.0

  # A Chrome Web Store Manager. Source: https://github.com/sugarshin/circleci-orbs
  chrome-webstore: sugarshin/chrome-webstore@0.0.3

jobs:
  install-dependencies:
    # Define a Node docker executor - https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:17.1

    # Then run your tests!
    # CircleCI will report the results back to your VCS provider
    steps:
      # Checkout the code as the first step
      - checkout

      # Install the dependencies from a package.json and cache them for faster future runs
      - node/install-packages:
          include-branch-in-cache-key: false

  test:
    # Define a Node docker executor - https://circleci.com/developer/images/image/cimg/node
    docker:
      - image: cimg/node:17.1

    # Then run your tests!
    # CircleCI will report the results back to your VCS provider
    steps:
      # Checkout the code as the first step
      - checkout

      # Install the dependencies from a package.json and cache them for faster future runs
      - node/install-packages:
          include-branch-in-cache-key: false

      # Run tests
      - run:
          name: "Build"
          command: npm run test

  build:
    docker:
      - image: cimg/node:17.1.0
    steps:
      # Checkout the code as the first step.
      - checkout

      # Install the dependencies from a package.json and cache them for faster future runs
      - node/install-packages:
          include-branch-in-cache-key: false

      # Run build command
      - run:
          name: "Build"
          command: npm run build

      # Zip the build folder to create a Chrome extension package
      - run:
          name: "Zip package"
          command: zip -r build.zip build

      # Store the build result as an artefact
      - store_artifacts:
          path: build.zip

      # Persist the build result for further steps
      - persist_to_workspace:
          root: .
          paths:
            - build.zip

  publish:
    docker:
      - image: cibuilds/chrome-extension:latest
    steps:
      # Checkout the code as the first step.
      - checkout

      # Attach the build result build.zip
      - attach_workspace:
          at: .

      # Publish the zip file to the Chrome Web Store Developer Dashboard
      - run:
          name: "Publish to the Google Chrome Store"
          command: ./scripts/publish_on_web_store.sh build.zip

workflows:
  version: 2
  main:
    jobs:
      - shellcheck/check
      - install-dependencies
      - test:
          requires:
            - install-dependencies
      - build:
          requires:
            - install-dependencies
      - chrome-webstore/upload:
          attach-workspace: true
          auto-publish: true
          checkout: false
          executor: nodejs
          extension-id: $APP_ID
          source: build.zip
          workspace-root: .
          requires:
            - test
            - build
#          branches:
#            ignore: /.*/
#          tags:
#            only: /.*/
